; File with functionality regarding the datastructure, handling, 
; updating and monitoring of the agent's political attitude 
; plane.

; FILE HISTORY:

; 2022-04-14 political attitude position and conviction value 
;            calculation. New conviction value can be later sum 
;            if it pass the neighbour check procudure which uses 
;            Manhattan distancing.
;            Authors: Pratchaya Khansomboon (PK), Eric Lundin 
;            (EL), Marcus Linné (ML), Linnéa Mörk (LM)
; 2022-04-15 Fix center of mass calculation, PK
; 2022-04-21 Political attitude generation for based on the
;            project description. This value is set in setup-heatmap
;            for every agent.
;            Author: EL, PK
; 2022-04-22 Fixes matrix indexing for setup-heatmap and center of
;            mass calculation. This causes problem when we were trying to chart
;            the political attitude percentages.
;            Author: PK
; 2022-04-?? setup-heatmap added by ???
; 2022-04-27 added an alternative to heatmap to test, included create-pol_plane, set_pol_attitude, strongest_pol_attitude, (gks)
; 2022-05-05 Remove alternative heatmap. Added utility function matrix create EL. Added Utility function matrix-insert Isac Pettersson(IP), 
;            Added Utility function matrix-query IP, rewrite setup-pol-attitude to function with the new message-matrix and conviction-matrix EL,
;            Function for updating the new message-matrix and conviction-matrix according to class discussion update-pol-attitude LM,
;       
;
;
;---------------------------------------------------


; Generate the attitude plane heatmap and set it in the beliefs hashmap.
; The function needs to be called inside a ask voter [] block
to setup-pol-attitude
  let rows attitude_rows
  let cols attitude_cols
  let polLeft 12.6
  let polSoc 39.5
  let polMid 9.3
  let polCons 22.1
  let polRight 15.7

  let tier1 polLeft
  let tier2 polSoc + tier1
  let tier3 polMid + tier2
  let tier4 polCons + tier3
  let tier5 polRight + tier4

  let max_heat 10

  let conviction-plane matrix_create rows cols 1
  let message-plane matrix_create rows cols 0

  let polVal  random(100)
  let polIndex 0

  if polVal < tier1                    [set polIndex 0]
  if tier1 < polVal and polVal < tier2 [set polIndex 1]
  if tier2 < polVal and polVal < tier3 [set polIndex 2]
  if tier3 < polVal and polVal < tier4 [set polIndex 3]
  if tier4 < polVal and polVal < tier5 [set polIndex 4]
    
  array:set conviction-plane (1 * cols + polIndex) 2
  
  add-belief create-belief "message-plane" message-plane
  add-belief create-belief "conviction-plane" conviction-plane
  let x (polindex mod attitude_cols)
  let y floor(polindex / attitude_cols)
  set current_pol_attitude list x y
end


; This should trigger each month and calculates what party you likes now
; as well as updating your conviction plane
; THIS WILL ALSO UPDATE current_pol_attitude
to update-pol-attitude
  ;let conviction-plane (item 1 (item 0 beliefs-of-type "attitude-plane"))
  let conviction-plane (item 1 (item 0 beliefs-of-type "conviction-plane"))
  let message-plane (item 1 (item 0 beliefs-of-type "message-plane"))
  
  let x (item 0 current_pol_attitude)
  let y (item 1 current_pol_attitude)
  let current_pol_index y * attitude_cols + x
  
  let current_max_w 0
  let current_max_w_index 0
  
  ; calculate a sum of message * attitude
  let matrix_sum 0.000001
  foreach (n-values (attitude_cols * attitude_rows) [i -> i])[
    index -> 
       set matrix_sum (matrix_sum + (array:item conviction-plane index) * (array:item message-plane index))
  ]
  
  ; calculate the bigges W_max
  let current_W 0
   foreach (n-values (attitude_cols * attitude_rows) [i -> i])[
    index -> 
       set current_W (((array:item conviction-plane index) * (array:item message-plane index)) / matrix_sum)
        array:set message-plane index 0
       if (current_W > current_max_w) [
          set current_max_w current_W
          set current_max_w_index index
    ]
  ]
  
  array:set conviction-plane current_max_w_index ((array:item conviction-plane current_max_w_index) + levelOfEducation)
  
  if (current_max_w_index != current_pol_index) [
    array:set conviction-plane current_max_w_index ((array:item conviction-plane current_max_w_index) + array:item conviction-plane current_pol_index)
    
    set x (current_max_w_index mod attitude_cols)
    set y floor(current_max_w_index / attitude_cols)
    set current_pol_attitude list x y
    ;Task 11.10
    set color red
    send-current-pol-att
  ]
   update-belief create-belief "message-plane" message-plane
   update-belief create-belief "conviction-plane" conviction-plane
end

; Function for increasing the current value in the message-plane when message is received.
to process_message [x y]
  let message-plane (item 1 (item 0 beliefs-of-type "message-plane"))
  let new-value matrix_query message-plane x y
  set new-value (new-value + 1)
  matrix_insert message-plane x y new-value
end

;------------------------------------------------------------------
; UTILLITY FUNCTION FOR HANDLING MATRICES PRETEND THESE ARE PRIVATE
;------------------------------------------------------------------
 

; Utility function for inserting value into matrix at selected x, y coordinates.
to matrix_insert [matrix x y value]  
  let index y * attitude_rows + x
  array:set matrix index (value)
end

; Reports a matrix with size rows * cols 
to-report matrix_create[rows columns value]
  let matrix array:from-list n-values (rows * columns) [value]
  report matrix
end

to-report matrix_query [matrix x y]
  let index y * attitude_cols + x
  let value array:item matrix index
  report value
end
