; File with functionality of the proactive behavior of the voter agents

; FILE HISTORY:

; 2022-04-14 Branch of "Chapter 5," week 15, TASK 5 with implementing the state machine and proactive parts. (Mouad, Reem, Petter)
; 2022-04-14 This code is included in the project.
; 2022-04-28 "Chapter 8" TASK 3 proactive behaviour in political campaign, added the state working-for-campaign and also updated proactive-behavior (Ademir Zjajo, Christian H, Isac Pettersson, Johan SkÃ¤remo, Rasmus Mathiasson)
;
;---------------------------------------------------




; Runs the current state
to proactive-behavior  
; nothin else here but 'run current_state' ! 
run current_state
end

; Definition of the states 

; -- State for the working agents --
to working-for-campaign
  print "Working for campaign"
  
  ;Subtask 2: Send political message to friends
  let msg create-message "inform"
  set msg add-content (list "pol-attitude" campaignPolAttitude) msg
  set msg add-multiple-receivers friendsList msg
  ;add-intention (word "send " msg) "true" ;
  add-intention "send " msg

end

; -- For process messages --
to call-for-campaign-friends
  set politicalCampaignManager true
  let cfpMsg create-message "cfp"
  set cfpMsg add-content (list "political_campaign" current_pol_attitude ) cfpMsg
  set cfpMsg add-multiple-receivers friendsList cfpMsg
  ;add-intention (word "send " cfpMsg) "true"
  add-intention "send" cfpMsg
end

to handle-cfp-campaign [managerid pol_attitude]
 ifelse random 2 = 0
 [
  ; Accept
  let cfpMsg create-message "propose"
  set cfpMsg add-content (list "political_campaign" current_pol_attitude ) cfpMsg
  set cfpMsg add-receiver managerid cfpMsg
  ;add-intention (word "send " cfpMsg) "true"
  add-intention "send " cfpMsg
 ]
 [
  ; Decline
  let cfpMsg create-message "refuse"
  set cfpMsg add-content (list "political_campaign" current_pol_attitude ) cfpMsg
  set cfpMsg add-receiver managerid cfpMsg
  ;add-intention (word "send " cfpMsg) "true"
  add-intention "send " cfpMsg
 ]
end

; -- Children  --
to schooling
  ;print "Schooling state"
  ;print "Understand the world surronding!"
end

; -- Adults --
to has-a-job
  ;print "Has a job!"
  if not flagEmployed [
    set current_state [ -> has-no-job ]
  ]
end

; Adult, do not have a job. 
to has-no-job
   set current_state [ -> look-for-job ]
   ;print "unemployed"
end

to feel-confirmed
   ;
end

to look-for-job
  print "looking for job"
  let jobMessage create-message "inform"
  let myRegion region
  let currentRegion [who] of (municipalities with [region = myRegion])
  set jobMessage add-multiple-receivers currentRegion jobMessage
  set jobMessage add-content "jobApply" jobMessage
  send jobMessage
end


to lead-campaign
  
end

to gain-status
  
end

to have-friends
  
end

; Unemployed trying to find like minded people 
to find-like-minded
  
end

; -- Elderly --
to at-elderly-home
  print "At elderly home!"
end


; ... Implemented by other group.
to add-friend [id pol_attitude]
;print "add-friend"
;print id
;print pol_attitude
; Implemented by other group.
end

; ... Implemented by other group.
to remove-friend [id]
;print "remove-friend"
; Implemented by other group.
end
;--- end remove from here!

